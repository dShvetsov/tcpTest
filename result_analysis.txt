
|серия экспериментов|алгоритм управления перегрузкой|средняя скорость соединения|Средняя степень утилизации сети|
|-------------------|-------------------------------|---------------------------|-------------------------------|
|     backbone      |          reno                 |          12Mbits/s        |           0.6%                |
|     backbone      |          cubic                |          31.5Mbits/s      |           1.75%               |
|     wireless      |          reno                 |          23.2Mbits/s      |           92.8%               |
|     wireless      |          cubic                |          22.8Mbits/s      |           91.2%               |
|     mixed         |          reno                 |          450Kbits/s       |           0.9%                |
|     mixed         |          cubic                |          460Kbits/s       |           0.93%               |

# 1. Чем обусловлена разница в скоростях, которую позволяют развить cubic и reno в магистральных и беспроводных сетях?

Cubic старается достичь максимального окна перегрузки и сохранить его как можно дольше. Это хорошо работает, когда
потери пакетов происходят только из-за перегрузок. Reno же не делает предположений о пропускной способности и увеличивает
окно перегрузок до тех пор, пока не произойдет потеря пакета.

В магистральных сетях cubic показывает себя лучше, так как окно перезок в этом алгоритме больше времени находится
в максимальном состоянии.

В беспроводных сетях потери происходят случайно и часто, поэтому cubic не правильно выбирает окно перегрузок и много
времени проводит в не максимальном состоянии. Случайная потеря пакета для Reno негативно сказывается на текущем окне перегрузке,
но не влияет на функцию аддитивного увеличения.

# 2. Какой из указанных алгоритмов выгоднее использовать на практике?

По-моему мнению лучше использовать cubiс. Он показывает лучший результат в магистральных сетях.
Несмотря, не то, что сейчас широко развиты беспроводные сети, алгоритмы перегрузок основанные на потери пакета
плохо работают в зашумленной среде.

# 3. 3. Почему одной из наиболее важных характеристик современных алгоритмов перегрузки является дружелюбность по отношению к другим алгоритмам (TCP friendliness)?

Сейчас используются разные алгормты борьбы с перегрузками. Если они будут плохо работать вместе это может привести
к деградации сети.
